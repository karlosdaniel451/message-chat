version: '3.8'

networks:
  net:
    driver: bridge

volumes:
  pulsardata:
  pulsarconf:
  pulsar-manager:
  api-db-data:


services:
  # api:
  #   build:
  #     context: ../
  #     dockerfile: ./infrastructure/Dockerfile
  #   environment:
  #     - DB_HOST=${DB_HOST}
  #     - DB_USER=${DB_USER}
  #     - DB_PORT=${DB_PORT}
  #     - DB_NAME=${DB_NAME}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - BROKER_HOST=${BROKER_HOST}
  #     - BROKER_PORT=${BROKER_PORT}
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     broker-server:
  #       condition: service_started
  #   command: >
  #     bash -c "/usr/bin/psql postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT} -c 'drop database if exists ${DB_NAME}' && /usr/bin/psql postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT} -c 'create database ${DB_NAME}'"
  #   networks:
  #     - net

  db:
    image: postgres:15.3-bullseye
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - api-db-data:/var/lib/postgresql/data
      - type: tmpfs
        target: /dev/shm
    healthcheck:
      test: pg_isready -U ${DB_USER} -h ${DB_HOST} -p ${DB_PORT} --timeout=5
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - net

  broker-server:
    image: apachepulsar/pulsar:3.1.0
    command: bin/pulsar standalone
    ports:
      - 6650:6650
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://pulsar:8080/metrics/" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - pulsardata:/pulsar/data
      - pulsarconf:/pulsar/conf
    networks:
      - net
